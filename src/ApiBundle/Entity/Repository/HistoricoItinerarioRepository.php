<?php

namespace ApiBundle\Entity\Repository;

/**
 * HorarioItinerarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HistoricoItinerarioRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function listarTodosRESTAdmin($limite = null, $dataUltimoAcesso){
        $qb = $this->createQueryBuilder('hi')
                ->select('hi.id, hi.ativo, hi.dataCadastro, hi.dataRecebimento, '
                        . 'hi.ultimaAlteracao, hi.programadoPara, IDENTITY(hi.usuarioCadastro) AS usuarioCadastro, '
                        . 'IDENTITY(hi.usuarioUltimaAlteracao) AS usuarioUltimaAlteracao, hi.tarifa, IDENTITY(hi.itinerario) AS itinerario')
                ->distinct()
                ->where("hi.ultimaAlteracao > :ultimaAlteracao")
                //->andWhere("c.programadoPara IS NULL OR c.programadoPara <= :now")
                ->setParameter('ultimaAlteracao', $dataUltimoAcesso)
                ->addOrderBy('hi.id');
        
        if(false == is_null($limite)){
            $qb->setMaxResults($limite);
        }
        
        return $qb->getQuery()->getResult();
        
    }
    
    public function listarTodosREST($limite = null, $dataUltimoAcesso){
        $qb = $this->createQueryBuilder('hi')
                ->select('hi.id, hi.ativo, hi.dataCadastro, hi.dataRecebimento, '
                        . 'hi.ultimaAlteracao, hi.programadoPara, IDENTITY(hi.usuarioCadastro) AS usuarioCadastro, '
                        . 'IDENTITY(hi.usuarioUltimaAlteracao) AS usuarioUltimaAlteracao, hi.tarifa, IDENTITY(hi.itinerario) AS itinerario')
                ->distinct()
                ->where("hi.ultimaAlteracao > :ultimaAlteracao")
                ->andWhere("hi.programadoPara IS NULL OR hi.programadoPara <= :now")
                ->setParameter('ultimaAlteracao', $dataUltimoAcesso)
                ->setParameter('now', new \DateTime())
                ->addOrderBy('hi.id');
        
        if(false == is_null($limite)){
            $qb->setMaxResults($limite);
        }
        
        return $qb->getQuery()->getResult();
        
    }
    
}
