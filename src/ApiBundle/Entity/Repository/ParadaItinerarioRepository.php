<?php

namespace ApiBundle\Entity\Repository;

/**
 * ParadaItinerarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ParadaItinerarioRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function listarTodosRESTAdmin($limite = null, $dataUltimoAcesso){
        $qb = $this->createQueryBuilder('pi')
                ->select('pi.id, pi.ativo, pi.dataCadastro, pi.dataRecebimento, '
                        . 'pi.ultimaAlteracao, pi.programadoPara, IDENTITY(pi.usuarioCadastro) AS usuarioCadastro, '
                        . 'IDENTITY(pi.usuarioUltimaAlteracao) AS usuarioUltimaAlteracao, pi.ordem, pi.destaque, pi.valorAnterior, '
                        . 'pi.valorSeguinte, pi.distanciaSeguinte, pi.distanciaSeguinteMetros, pi.tempoSeguinte, IDENTITY(pi.parada) AS parada, IDENTITY(pi.itinerario) AS itinerario')
                ->distinct()
                ->where("pi.ultimaAlteracao > :ultimaAlteracao")
                //->andWhere("c.programadoPara IS NULL OR c.programadoPara <= :now")
                ->setParameter('ultimaAlteracao', $dataUltimoAcesso)
                ->addOrderBy('pi.id');
        
        if(false == is_null($limite)){
            $qb->setMaxResults($limite);
        }
        
        return $qb->getQuery()->getResult();
        
    }
    
    public function listarTodosREST($limite = null, $dataUltimoAcesso){
        $qb = $this->createQueryBuilder('pi')
                ->select('pi.id, pi.ativo, pi.dataCadastro, pi.dataRecebimento, '
                        . 'pi.ultimaAlteracao, pi.programadoPara, IDENTITY(pi.usuarioCadastro) AS usuarioCadastro, '
                        . 'IDENTITY(pi.usuarioUltimaAlteracao) AS usuarioUltimaAlteracao, pi.ordem, pi.destaque, pi.valorAnterior, '
                        . 'pi.valorSeguinte, pi.distanciaSeguinte, pi.distanciaSeguinteMetros, pi.tempoSeguinte, IDENTITY(pi.parada) AS parada, IDENTITY(pi.itinerario) AS itinerario')
                ->distinct()
                ->where("pi.ultimaAlteracao > :ultimaAlteracao")
                ->andWhere("pi.programadoPara IS NULL OR pi.programadoPara <= :now")
                ->setParameter('ultimaAlteracao', $dataUltimoAcesso)
                ->setParameter('now', new \DateTime())
                ->addOrderBy('pi.id');
        
        if(false == is_null($limite)){
            $qb->setMaxResults($limite);
        }
        
        return $qb->getQuery()->getResult();
        
    }
    
    public function listarTodosRESTSemData($limite = null, $uf = "", $cidade = "", $bairro = "", $slug = ""){
            
            $qb = $this->createQueryBuilder('pi')
                    ->select("i.id, i.ativo, i.dataCadastro, i.dataRecebimento, "
                            . "i.ultimaAlteracao, i.programadoPara, IDENTITY(i.usuarioCadastro) AS usuarioCadastro, "
                            . "IDENTITY(i.usuarioUltimaAlteracao) AS usuarioUltimaAlteracao, i.tarifa, i.sigla, i.distancia, i.distanciaMetros, "
                            . "i.tempo, i.acessivel, "
                            . "i.observacao, "
                            . "IDENTITY(i.empresa) AS empresa"
//                            . "CONCAT('http://localhost/crc-web/web/app_dev.php/api/empresas/', em.slug) AS empresa"
                            . "")
                    ->distinct()
                    ->where("pi.ativo = 1")
                    ->andWhere("e.sigla = :uf")
                    ->andWhere("c.slug = :cidade")
                    ->andWhere("b.slug = :bairro")
                    ->andWhere("p.slug = :slug")
                    ->andWhere('pi.ordem < (SELECT MAX(pi2.ordem) FROM ApiBundle:ParadaItinerario pi2 WHERE pi2.itinerario = i.id)')
                    ->andWhere("p.programadoPara IS NULL OR p.programadoPara <= :now")
                    ->innerJoin("ApiBundle:Parada", "p", "WITH", "p.id = pi.parada")
                    ->innerJoin("ApiBundle:Itinerario", "i", "WITH", "i.id = pi.itinerario")
                    ->innerJoin("ApiBundle:Bairro", "b", "WITH", "b.id = p.bairro")
                    ->innerJoin("ApiBundle:Cidade", "c", "WITH", "c.id = b.cidade")
                    ->innerJoin("ApiBundle:Estado", "e", "WITH", "e.id = c.estado")
//                    ->innerJoin("ApiBundle:Empresa", "em", "WITH", "em.id = i.empresa")
                    ->setParameter('uf', $uf)
                    ->setParameter('cidade', $cidade)
                    ->setParameter('bairro', $bairro)
                    ->setParameter('slug', $slug)
                    ->setParameter('now', new \DateTime())
                    ->addOrderBy('pi.id');

            if(false == is_null($limite)){
                $qb->setMaxResults($limite);
            }

            return $qb->getQuery()->getResult();

        }
        
        public function listarTodosRESTSemDataPorId($limite = null, $id){
            
            $qb = $this->createQueryBuilder('pi')
                    ->select("i.id, i.ativo, i.dataCadastro, i.dataRecebimento, "
                            . "i.ultimaAlteracao, i.programadoPara, IDENTITY(i.usuarioCadastro) AS usuarioCadastro, "
                            . "IDENTITY(i.usuarioUltimaAlteracao) AS usuarioUltimaAlteracao, i.tarifa, i.sigla, i.distancia, i.distanciaMetros, "
                            . "i.tempo, i.acessivel, "
                            . "i.observacao, "
                            . "IDENTITY(i.empresa) AS empresa"
//                            . "CONCAT('http://localhost/crc-web/web/app_dev.php/api/empresas/', em.slug) AS empresa"
                            . "")
                    ->distinct()
                    ->where("pi.ativo = 1")
                    ->andWhere("pi.parada = :id")
                    ->andWhere('pi.ordem < (SELECT MAX(pi2.ordem) FROM ApiBundle:ParadaItinerario pi2 WHERE pi2.itinerario = i.id)')
                    ->andWhere("p.programadoPara IS NULL OR p.programadoPara <= :now")
                    ->innerJoin("ApiBundle:Parada", "p", "WITH", "p.id = pi.parada")
                    ->innerJoin("ApiBundle:Itinerario", "i", "WITH", "i.id = pi.itinerario")
                    ->innerJoin("ApiBundle:Bairro", "b", "WITH", "b.id = p.bairro")
                    ->innerJoin("ApiBundle:Cidade", "c", "WITH", "c.id = b.cidade")
                    ->innerJoin("ApiBundle:Estado", "e", "WITH", "e.id = c.estado")
//                    ->innerJoin("ApiBundle:Empresa", "em", "WITH", "em.id = i.empresa")
                    ->setParameter('id', $id)
                    ->setParameter('now', new \DateTime())
                    ->addOrderBy('pi.id');

            if(false == is_null($limite)){
                $qb->setMaxResults($limite);
            }

            return $qb->getQuery()->getResult();

        }
        
        public function listarTodasParadasRESTSemData($limite = null, $itinerario){
            
            $qb = $this->createQueryBuilder('pi')
                    ->select("p.id, p.ativo, p.dataCadastro, p.dataRecebimento, 
                        p.ultimaAlteracao, p.programadoPara, IDENTITY(p.usuarioCadastro) AS usuarioCadastro, 
                        IDENTITY(p.usuarioUltimaAlteracao) AS usuarioUltimaAlteracao, p.nome, p.slug, p.imagem, 
                        p.latitude, p.longitude, p.taxaDeEmbarque, IDENTITY(p.bairro) AS bairro, p.sentido")
                    ->distinct()
                    ->where("pi.ativo = 1")
                    ->andWhere("p.ativo = 1")
                    ->andWhere("pi.itinerario = :itinerario")
                    ->andWhere("p.programadoPara IS NULL OR p.programadoPara <= :now")
                    ->innerJoin("ApiBundle:Parada", "p", "WITH", "p.id = pi.parada")
//                    ->innerJoin("ApiBundle:Empresa", "em", "WITH", "em.id = i.empresa")
                    ->setParameter('itinerario', $itinerario)
                    ->setParameter('now', new \DateTime())
                    ->addOrderBy('pi.ordem');

            if(false == is_null($limite)){
                $qb->setMaxResults($limite);
            }

            return $qb->getQuery()->getResult();

        }
        
        public function listarTodasParadasRESTSemDataComCidadeEBairro($limite = null, $itinerario){
            
            $qb = $this->createQueryBuilder('pi')
                    ->select("p.id, p.ativo, p.dataCadastro, p.dataRecebimento, 
                        p.ultimaAlteracao, p.programadoPara, IDENTITY(p.usuarioCadastro) AS usuarioCadastro, 
                        IDENTITY(p.usuarioUltimaAlteracao) AS usuarioUltimaAlteracao, p.nome, p.slug, p.imagem, 
                        p.latitude, p.longitude, p.taxaDeEmbarque, b.nome AS bairro, c.nome AS cidade, p.sentido")
                    ->distinct()
                    ->where("pi.ativo = 1")
                    ->andWhere("p.ativo = 1")
                    ->andWhere("pi.itinerario = :itinerario")
                    ->andWhere("p.programadoPara IS NULL OR p.programadoPara <= :now")
                    ->innerJoin("ApiBundle:Parada", "p", "WITH", "p.id = pi.parada")
                    ->innerJoin("ApiBundle:Bairro", "b", "WITH", "b.id = p.bairro")
                    ->innerJoin("ApiBundle:Cidade", "c", "WITH", "c.id = b.cidade")
                    ->innerJoin("ApiBundle:Estado", "e", "WITH", "e.id = c.estado")
                    ->setParameter('itinerario', $itinerario)
                    ->setParameter('now', new \DateTime())
                    ->addOrderBy('pi.ordem');

            if(false == is_null($limite)){
                $qb->setMaxResults($limite);
            }

            return $qb->getQuery()->getResult();

        }
    
}
