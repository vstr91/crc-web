<?php

namespace ApiBundle\Entity\Repository;

/**
 * FeriadoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FeriadoRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function listarTodosRESTAdmin($limite = null, $dataUltimoAcesso){
        $qb = $this->createQueryBuilder('f')
                ->select('f.id, f.ativo, f.dataCadastro, f.dataRecebimento, '
                        . 'f.ultimaAlteracao, f.programadoPara, IDENTITY(f.usuarioCadastro) AS usuarioCadastro, '
                        . 'IDENTITY(f.usuarioUltimaAlteracao) AS usuarioUltimaAlteracao, f.nome, f.data, f.tipo, f.descricao, f.slug, IDENTITY(f.cidade) AS cidade')
                ->distinct()
                ->where("f.ultimaAlteracao > :ultimaAlteracao")
                //->andWhere("c.programadoPara IS NULL OR c.programadoPara <= :now")
                ->setParameter('ultimaAlteracao', $dataUltimoAcesso)
                ->addOrderBy('f.id');
        
        if(false == is_null($limite)){
            $qb->setMaxResults($limite);
        }
        
        return $qb->getQuery()->getResult();
        
    }
    
    public function listarTodosREST($limite = null, $dataUltimoAcesso){
        $qb = $this->createQueryBuilder('f')
                ->select('f.id, f.ativo, f.dataCadastro, f.dataRecebimento, '
                        . 'f.ultimaAlteracao, f.programadoPara, IDENTITY(f.usuarioCadastro) AS usuarioCadastro, '
                        . 'IDENTITY(f.usuarioUltimaAlteracao) AS usuarioUltimaAlteracao, f.nome, f.data, f.tipo, f.descricao, f.slug, IDENTITY(f.cidade) AS cidade')
                ->distinct()
                ->where("f.ultimaAlteracao > :ultimaAlteracao")
                ->andWhere("f.programadoPara IS NULL OR f.programadoPara <= :now")
                ->setParameter('ultimaAlteracao', $dataUltimoAcesso)
                ->setParameter('now', new \DateTime())
                ->addOrderBy('f.id');
        
        if(false == is_null($limite)){
            $qb->setMaxResults($limite);
        }
        
        return $qb->getQuery()->getResult();
        
    }
    
}
