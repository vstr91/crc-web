<?php

namespace ApiBundle\Entity\Repository;

/**
 * BairroRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BairroRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function listarTodosRESTAdmin($limite = null, $dataUltimoAcesso){
        $qb = $this->createQueryBuilder('b')
                ->select('b.id, b.ativo, b.dataCadastro, b.dataRecebimento, '
                        . 'b.ultimaAlteracao, b.programadoPara, IDENTITY(b.usuarioCadastro) AS usuarioCadastro, '
                        . 'IDENTITY(b.usuarioUltimaAlteracao) AS usuarioUltimaAlteracao, b.nome, b.slug, IDENTITY(b.cidade) AS cidade')
                ->distinct()
                ->where("b.ultimaAlteracao > :ultimaAlteracao")
                //->andWhere("c.programadoPara IS NULL OR c.programadoPara <= :now")
                ->setParameter('ultimaAlteracao', $dataUltimoAcesso)
                ->addOrderBy('b.id');
        
        if(false == is_null($limite)){
            $qb->setMaxResults($limite);
        }
        
        return $qb->getQuery()->getResult();
        
    }
    
    public function listarTodosREST($limite = null, $dataUltimoAcesso){
        $qb = $this->createQueryBuilder('b')
                ->select('b.id, b.ativo, b.dataCadastro, b.dataRecebimento, '
                        . 'b.ultimaAlteracao, b.programadoPara, IDENTITY(b.usuarioCadastro) AS usuarioCadastro, '
                        . 'IDENTITY(b.usuarioUltimaAlteracao) AS usuarioUltimaAlteracao, b.nome, b.slug, IDENTITY(b.cidade) AS cidade')
                ->distinct()
                ->where("b.ultimaAlteracao > :ultimaAlteracao")
                ->andWhere("b.programadoPara IS NULL OR b.programadoPara <= :now")
                ->setParameter('ultimaAlteracao', $dataUltimoAcesso)
                ->setParameter('now', new \DateTime())
                ->addOrderBy('b.id');
        
        if(false == is_null($limite)){
            $qb->setMaxResults($limite);
        }
        
        return $qb->getQuery()->getResult();
        
    }
    
    public function listarTodosRESTSemData($limite = null, $uf = "", $cidade = "", $slug = ""){
        
        if($uf && $cidade && $slug){
            $qb = $this->createQueryBuilder('b')
                ->select('b.id, b.ativo, b.dataCadastro, b.dataRecebimento, '
                        . 'b.ultimaAlteracao, b.programadoPara, IDENTITY(b.usuarioCadastro) AS usuarioCadastro, '
                        . 'IDENTITY(b.usuarioUltimaAlteracao) AS usuarioUltimaAlteracao, b.nome, b.slug, IDENTITY(b.cidade) AS cidade')
                ->distinct()
                ->where("e.sigla = :uf")
                ->andWhere("c.slug = :cidade")
                ->andWhere("b.slug = :slug")
                ->andWhere("b.programadoPara IS NULL OR b.programadoPara <= :now")
                ->andWhere("b.ativo = 1")
                ->innerJoin("ApiBundle:Cidade", "c", "WITH", "c.id = b.cidade")
                ->innerJoin("ApiBundle:Estado", "e", "WITH", "e.id = c.estado")
                ->setParameter('uf', $uf)
                ->setParameter('cidade', $cidade)
                ->setParameter('slug', $slug)
                ->setParameter('now', new \DateTime())
                ->addOrderBy('b.id');
        
            if(false == is_null($limite)){
                $qb->setMaxResults($limite);
            }

            return $qb->getQuery()->getResult();
        } else if($uf && $cidade){
            $qb = $this->createQueryBuilder('b')
                ->select('b.id, b.ativo, b.dataCadastro, b.dataRecebimento, '
                        . 'b.ultimaAlteracao, b.programadoPara, IDENTITY(b.usuarioCadastro) AS usuarioCadastro, '
                        . 'IDENTITY(b.usuarioUltimaAlteracao) AS usuarioUltimaAlteracao, b.nome, b.slug, IDENTITY(b.cidade) AS cidade')
                ->distinct()
                ->where("e.sigla = :uf")
                ->andWhere("c.slug = :cidade")
                ->andWhere("b.programadoPara IS NULL OR b.programadoPara <= :now")
                ->andWhere("b.ativo = 1")
                ->innerJoin("ApiBundle:Cidade", "c", "WITH", "c.id = b.cidade")
                ->innerJoin("ApiBundle:Estado", "e", "WITH", "e.id = c.estado")
                ->setParameter('uf', $uf)
                ->setParameter('cidade', $cidade)
                ->setParameter('now', new \DateTime())
                ->addOrderBy('b.id');
        
            if(false == is_null($limite)){
                $qb->setMaxResults($limite);
            }

            return $qb->getQuery()->getResult();
        }
        
        
        
    }
    
}
